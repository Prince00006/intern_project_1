# -*- coding: utf-8 -*-
"""project01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FLulpdyG32oswl70VsyZp7CB6PxeivVK

**TITLE :-  MOVIE RECOMMENDATION SYSTEM**

---

OBJECTIVE :- To get the suggestion of movies that fits user's choice

DATA SOURCE :- https://raw.githubusercontent.com/YBI-Foundation/Dataset/refs/heads/main/Movies%20Recommendation.csv

Import Library
"""

import pandas as pd

import numpy as ny

"""Import Data"""

df = pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/refs/heads/main/Movies%20Recommendation.csv')

df.head()

"""---

DESCRIBE DATA
"""

df.info()

df.shape

df.columns

"""Get Feature Selection


"""

df_features = df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

"""Selected five existing features to recommend movies. It may vary form one projet to another"""

df_features.shape

df_features

"""Define Target Variable (y) and Feature Variables (X)

"""

x = df_features['Movie_Genre'] + ' ' + df_features['Movie_Keywords'] + ' ' + df_features['Movie_Tagline'] + ' ' + df_features['Movie_Cast'] + ' ' + df_features['Movie_Director']

x

x.shape

"""Get feature text convertion to tokens"""

!pip install scikit-learn

import sklearn

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""Get Similarity Score using Cosine Similarity"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

"""Get Name as input from user and validate for closing spelling"""

Favourite_Movie_Name = input('Enter your favourite movie name : ')

All_Movies_Title_List = df['Movie_Title'].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match = Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""Get All Movies based on Recommnedation Score wt Favourite Movie"""

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)
print(Sorted_Similar_Movies)

print('Top 30 movies suggested for you : \n')

i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i, '.',title_from_index)
    i+=1

"""PREDICTION

Top 10 Movie Recommendations System
"""

Movie_Name = input('Enter your favourite movie name : ')

list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))

Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print('Top 10 movies suggested for you : \n')

i = 1

for movie in Sorted_Similar_Movies:
  index = movie[0]
  title_from_index = df[df.Movie_ID==index]['Movie_Title'].values
  if (i<11):
    print(i, '.',title_from_index)
    i+=1

"""EXPLANATION

This analysis helps us to get recommendation on movies that we would like to watch based on our favourite movie name. the above analysis is done on a data set that contains data about various movies and it predicts the movies that we can watch
"""